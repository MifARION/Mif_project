# ##########
# .........#
# ######.###
# #......###
# #.####.###
# #........#
# ##.#######
# ##.##.####
# ##......##
# #######.##



# ОБЯЗАТЕЛЬНО ЗАДАЙТЕ В СВОЕМ ЛАБИРИНТЕ ФИНИШНУЮ ТОЧКУ "2"!

labyrinth = [['.', '.', '.', '.', '.', '.', '.', '.', '.', '#'],  # Создаем сам лабиринт по вашему эскизу

             ['#', '#', '#', '#', '#', '#', '.', '#', '#', '#'],

             ['#', '.', '.', '.', '.', '.', '.', '#', '#', '#'],

             ['#', '.', '#', '#', '#', '#', '.', '#', '#', '#'],

             ['#', '.', '.', '.', '.', '.', '.', '.', '.', '#'],

             ['#', '#', '.', '#', '#', '#', '#', '#', '#', '#'],

             ['#', '#', '.', '#', '#', '.', '#', '#', '#', '#'],

             ['#', '#', '.', '.', '.', '.', '.', '.', '#', '#'],

             ['#', '#', '#', '#', '#', '#', '#', '#', '.', '#']]

first = '#' == 1
second = '.' == 0


def search(x, y):
    if labyrinth[x][y] == '.':  # Создаем функцию и задаем финишное значение
        print(f'found at {x},{y}')
        return True

    elif labyrinth[x][y] == 1:  # Показываем стены
        print(f'wall at {x},{y}')
        return False
    elif labyrinth[x][y] == 3:  # Обозначаем проделанный путь
        print(f'visited at {x},{y}')
        return False
    print(f'visiting {x},{y}')

    labyrinth[x][y] = 3  # Проделанный путь

    if ((x < len(labyrinth) - 1 and search(x + 1, y))  # Пишем условие шага по лабиринту
            or (y > 0 and search(x, y - 1))
            or (x > 0 and search(x - 1, y))
            or (y < len(labyrinth) - 1 and search(x, y + 1))):
        return True
    return False


search(0, 1)  # Вызываем функцию со стартовым
